{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "verbal-decrease",
   "metadata": {},
   "outputs": [],
   "source": [
    "import networkx as nx\n",
    "import random\n",
    "from copy import copy\n",
    "#print([(i,(\"odd\", \"even\")[len(graph._adj[i]) %2 == 0]) for i in graph._adj])#\n",
    "#print(nx.edge_dfs(graph))\n",
    "def graph_covering(G):\n",
    "    #copie de G pour pas le modfier\n",
    "    cp_G = copy(G)\n",
    "    \n",
    "    #arretes sans le poid\n",
    "    edges = [(a,b) for (a,b,c) in cp_G]\n",
    "    \n",
    "    #Création du graph orienté et du non-orienté\n",
    "    d_graph = nx.DiGraph()\n",
    "    graph = nx.Graph()\n",
    "    for (a,b,c) in G:\n",
    "        d_graph.add_edge(a,b,weight=c)\n",
    "        graph.add_edge(a,b,weight=c)\n",
    "    \n",
    "    #On Eulerianise le graph non-orienté (opération impossible avec celui orienté)\n",
    "    e_graph = nx.eulerize(graph)\n",
    "    #print(\"Added:\",[(a,b) for (a,b,c) in e_graph.edges if (a,b) not in edges])\n",
    "    \n",
    "    #Calcul du chemin Eulerien\n",
    "    e_dict = to_dict([(a,b) for (a,b,c) in e_graph.edges])\n",
    "    e_path  = fleury.fleury(e_dict)\n",
    "    \n",
    "    \n",
    "    #En se basant sur les noeuds du graphs orienté, toutes arrètes inexistantes\n",
    "    #- sera remplacée par le plus court chemin pour rejoindre les 2 points\n",
    "    #- Ainsi, aucun bout de chemin ne passera par une route impossible\n",
    "    path = []\n",
    "    visited = []\n",
    "    print(\"[+] Adapting path to the Directed Graph\")\n",
    "    for (a,b) in e_path:\n",
    "        path.append(a)\n",
    "        # - - Si on ne peut liée 2 points, on fait un détour\n",
    "        if ((a,b) not in edges):\n",
    "            # - - Cas spécial:\n",
    "            # (a,b) n'est pas dans edges mais (b,a) lui y est mais n'a toujours pas été visité\n",
    "            # Si on applique la suite de l'algo, (b,a ne sera jamais visité)\n",
    "            # Notre solution est la suivante:\n",
    "            # Forcer la visite de cette Arrete et ensuite continuer le deroulement de l'algo\n",
    "            # - - \n",
    "            if (b,a) in edges and (b,a) not in visited:\n",
    "                tmp_path = nx.shortest_path(d_graph, a, b)\n",
    "                path += tmp_path[1:]\n",
    "                #- - Ajout aux visited les arretes du détour\n",
    "                add_visited(visited, tmp_path)\n",
    "                \n",
    "                path.append(a)\n",
    "                visited.append((b,a))\n",
    "            \n",
    "            tmp_path = nx.shortest_path(d_graph, a, b)\n",
    "            #- - Ajout aux visited les arretes du détour\n",
    "            add_visited(visited, tmp_path)\n",
    "            path += tmp_path[1:-1]\n",
    "            \n",
    "        visited.append((a,b))\n",
    "    return path\n",
    "  \n",
    "def add_visited(visited, path):\n",
    "    for i in range(len(path) - 1):\n",
    "        n1 = path[i]\n",
    "        n2 = path[i+1]\n",
    "        \n",
    "        if (n1,n2) not in visited:\n",
    "            visited.append((n1,n2))\n",
    "    \n",
    "def get_best_path(G):\n",
    "    res = graph_covering(G)\n",
    "    return res"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.2"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
